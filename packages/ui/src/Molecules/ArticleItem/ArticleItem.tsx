import Styles from './ArticleItem.module.scss'
import clsx from 'clsx'
import {Button} from "../../Atoms/Button/Button";
import {TitreH2} from "../../Atoms/TitreH2/TitreH2";
import React, {useEffect, useState} from "react";

class img {
    constructor(public src: string, public alt: string) {
    }
}
class techno {
    constructor(public name: string, public icon: string) {
    }
}

type Props = {
    className?: string
    Image?: img
    Title?: string
    Description?: string
    Date?: Date
    Views?: number
    Technologies?: Array<techno>
}

export function ArticleItem({className, Image, Title, Description, Date, Views, Technologies}: Props) {

    return <article className={clsx(className, Styles.ArcticleItem)} >
        <div className={clsx(Styles.ContentImage)}>
            <svg width="104" height="104" viewBox="0 0 104 104" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M91.4 51.3C91.4 39.941 83.594 30.7 74 30.7C73.33 30.7 72.672 30.756 72.021 30.843C69.804 18.136 60.426 9 49.4 9C36.607 9 26.2 21.336 26.2 36.5C26.2 38.052 26.322 39.64 26.559 41.319C19.892 42.305 14.8 49.058 14.8 57.2C14.8 65.282 19.733 71.892 26.478 72.978L24.2 76.1H27.3V85.3C27.3 85.853 27.748 86.3 28.3 86.3C28.852 86.3 29.3 85.853 29.3 85.3V76.1H32.2L29.925 73.119C35.169 72.437 39.549 68.237 41.199 62.329C42.983 63.133 44.798 63.662 46.525 63.886L42.1 70.1H48.6V73.2C48.6 74.142 47.742 75 46.8 75H44.6C42.638 75 41.1 76.537 41.1 78.6C41.1 80.563 42.638 82.1 44.6 82.1H53.8C54.641 82.1 55.3 82.759 55.3 83.6C55.3 84.441 54.641 85.1 53.8 85.1H50.1C48.391 85.1 47 86.491 47 88.201V94C47 94.553 47.448 95 48 95C48.552 95 49 94.553 49 94V88.2C49 87.542 49.569 87.099 50.1 87.099H53.8C55.763 87.099 57.3 85.562 57.3 83.599C57.3 81.636 55.763 80.099 53.8 80.099H44.6C43.759 80.099 43.1 79.44 43.1 78.499C43.1 77.658 43.759 76.999 44.6 76.999H46.8C48.86 76.999 50.6 75.259 50.6 73.199V70.099H56.3L51.428 63.915C54.057 63.582 56.562 62.77 58.896 61.486C61.564 67.009 66.322 70.93 71.89 71.732L68.7 76.2H73V85.3C73 85.853 73.447 86.3 74 86.3C74.553 86.3 75 85.853 75 85.3V76.2H79.2L75.697 71.799C84.498 70.785 91.4 61.981 91.4 51.3ZM83.202 36.421C84.575 39.299 85.4 42.601 85.4 46.2C85.4 57.1 78.1 65.9 69 65.9C67.008 65.9 65.069 65.437 63.286 64.634C60.401 61.252 58.6 56.529 58.6 51.3C58.6 41.044 65.508 32.7 74 32.7C77.452 32.7 80.631 34.095 83.202 36.421ZM16.8 57.2C16.8 50.027 21.188 44.093 26.915 43.288C28.267 49.855 31.706 55.726 36.516 59.512L36.5631 59.546L36.6134 59.5822C36.6687 59.6219 36.7242 59.6617 36.779 59.702C35.839 64.09 33.177 67.624 29.3 69.101C29.15 69.151 29.025 69.201 28.9 69.251C28.775 69.301 28.65 69.351 28.5 69.401C28.35 69.451 28.175 69.476 28 69.501L28 69.501L27.9999 69.501C27.8249 69.526 27.6499 69.551 27.5 69.601C25.804 69.862 24.109 69.733 22.469 69.256C19.046 66.846 16.8 62.37 16.8 57.2ZM50.7 62C50.417 62 50.134 62.026 49.851 62.055C49.061 62.134 48.309 62.137 47.483 62.004C45.366 61.827 43.112 61.139 40.947 60.006C39.8227 59.4444 38.7894 58.693 37.7201 57.9156L37.718 57.914C33.1 54.279 29.808 48.489 28.686 42.036C28.359 40.074 28.2 38.263 28.2 36.5C28.2 22.439 37.71 11 49.4 11C59.462 11 68.036 19.474 70.066 31.251C62.363 33.371 56.6 41.545 56.6 51.3C56.6 54.269 57.144 57.085 58.103 59.638C55.774 60.949 53.264 61.748 50.7 62ZM48.994 15.006C45.826 15.345 42.371 16.211 38.583 20.203C34.61 24.287 33.861 28.532 33.615 29.927C33.519 30.471 33.882 30.989 34.426 31.086C34.485 31.096 34.543 31.101 34.601 31.101C35.078 31.101 35.499 30.76 35.585 30.275C35.804 29.03 36.473 25.241 40.025 21.589C43.544 17.88 46.609 17.273 49.206 16.995C49.755 16.936 50.153 16.444 50.094 15.894C50.036 15.344 49.539 14.947 48.994 15.006ZM58.6 21.2C60.643 21.2 62.3 22.856 62.3 24.9C62.3 26.943 60.643 28.6 58.6 28.6C56.556 28.6 54.9 26.943 54.9 24.9C54.9 22.856 56.557 21.2 58.6 21.2ZM16.313 37.451C17.331 37.296 18.247 36.748 18.892 35.909C19.54 35.066 19.809 34.029 19.65 32.986C19.495 31.968 18.947 31.052 18.109 30.407C17.671 30.069 17.043 30.152 16.707 30.59C16.37 31.028 16.452 31.655 16.89 31.992C17.768 32.668 17.952 33.852 17.307 34.689C16.977 35.117 16.517 35.396 16.011 35.473C15.513 35.547 15.014 35.418 14.609 35.106C14.171 34.768 13.543 34.851 13.207 35.289C12.87 35.727 12.952 36.355 13.39 36.691C14.075 37.218 14.888 37.494 15.728 37.494C15.922 37.496 16.118 37.481 16.313 37.451ZM75.8 25.9C75.704 25.9 75.607 25.886 75.511 25.857C74.981 25.697 74.683 25.139 74.843 24.612L76.143 20.312C76.296 19.808 76.812 19.512 77.324 19.627L81.209 20.517L82.242 17.018C82.399 16.489 82.953 16.187 83.484 16.342C84.014 16.498 84.316 17.054 84.16 17.584L82.86 21.984C82.71 22.491 82.195 22.794 81.677 22.675L77.786 21.783L76.757 25.189C76.626 25.621 76.23 25.9 75.8 25.9Z" fill="var(--color-icon-article)"/>
            </svg>
        </div>
        <div className={Styles.DescriptionArticle}>
            <div className={clsx(Styles.infoArticle)}>
                <time dateTime={Date?.toLocaleDateString("fr")}>{Date?.toLocaleDateString("fr")}</time>
                <span>10 vues</span>
            </div>
            <TitreH2 className={Styles.TitreArticle}>{Title}</TitreH2>
            <div className={clsx(Styles.ContentButton)}>

                {Technologies && Technologies.map((techno, index) => {
                    return <Button className={clsx(Styles.ButtonArticle)} color={"var(--tertiary-color);"} outline={true} icon={techno.icon} children={techno.name}/>
                })}
            </div>
            <p>
                {Description}
            </p>
        </div>
    </article>
}